@page "/"

@inject ICommandDispatcher Commands
@inject IEventHandlerCollection EventHandlers
@inject IQueryDispatcher Queries

<h1>
    Outcomes

    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#outcome-create" style="float: right">
        <span class="glyphicon glyphicon-plus"></span>
        New Outcome
    </button>
</h1>

@if (Months != null)
{
    <ul class="nav nav-tabs">
        @foreach (var month in Months)
        {
            @if (month == SelectedMonth)
            {
                <li role="presentation" class="active">
                    <a href="#" @onclick(() => OnMonthSelected(month))>@month.ToString()</a>
                </li>
            }
            else
            {
                <li role="presentation">
                    <a href="#" @onclick(() => OnMonthSelected(month))>@month.ToString()</a>
                </li>
            }
        }
    </ul>
}

<OutcomeEdit Id="outcome-create" />

@if (Categories != null)
{
    <div class="outcomes">
        <div class="panel panel-default bar-graph bar-graph-summary">
            <div class="panel-body">
                <h3 class="pull-left">
                    <span class="glyphicon glyphicon-signal"></span>
                    <span class="category-name">Summary</span>
                </h3>

                <div class="pull-right">
                    <strong>@Categories.Sum(c => c.TotalAmount.Value).ToString("#.00") CZK</strong>
                </div>
            </div>
        </div>

        @foreach (var category in Categories)
        {
            <div class="panel panel-default bar-graph">
                <div class="panel-body">
                    <h3 class="pull-left">
                        <span>@category.Icon</span>
                        <span class="category-name">@category.Name</span>
                    </h3>

                    <div class="pull-right">
                        <div class="amount">@category.TotalAmount</div>
                        <div class="bar" style="width: @GetPercentualValue(category)%; background-color: @category.Color.ToHashCode();"></div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@functions {

    protected List<MonthModel> Months { get; private set; }
    protected MonthModel SelectedMonth { get; private set; }

    protected List<CategoryWithAmountModel> Categories { get; private set; }

    protected override async Task OnInitAsync()
    {
        //if (handler == null)
        //{
        //    handler = new CurrencyEventHandler(OnEvent);
        //    EventHandlers.AddAll(handler);
        //}
        //else
        //{
        //    handler.Handler = OnEvent;
        //}

        await LoadMonthsAsync();

        //Console.WriteLine($"Currencies: Count: {Models.Count}.");
    }

    protected async Task LoadMonthsAsync()
    {
        Months = await Queries.QueryAsync(new ListMonthWithOutcome());
        OnMonthSelected(Months.FirstOrDefault());
    }

    protected async Task LoadMonthOutcomesAsync()
    {
        if (SelectedMonth != null)
            Categories = await Queries.QueryAsync(new ListMonthCategoryWithOutcome(SelectedMonth));

        Console.WriteLine($"Outcomes: {Categories?.Count}.");
    }

    protected async void OnMonthSelected(MonthModel selectedMonth)
    {
        SelectedMonth = selectedMonth;
        await LoadMonthOutcomesAsync();
        StateHasChanged();
    }

    protected decimal GetPercentualValue(CategoryWithAmountModel category)
    {
        decimal total = Categories.Sum(c => c.TotalAmount.Value);
        return 100 / total * category.TotalAmount.Value;
    }

}