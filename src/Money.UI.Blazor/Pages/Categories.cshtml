@page "/categories"
@inject ICommandDispatcher Commands
@inject IEventHandlerCollection EventHandlers
@inject IQueryDispatcher Queries

<h1>
    Categories

    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#category-create" style="float: right">
        <span class="glyphicon glyphicon-plus"></span>
        New Category
    </button>
</h1>


<CategoryName Id="category-create" />

@{ 
    int i = 0;
}
@foreach (var item in Models)
{
    i++;
    int j = i;

    <div class="alert" style="background-color: @GetColorHashCode(item)">
        @if (item.Icon != null)
        {
            <i>@item.Icon</i>
        }
        <strong>
            @item.Name
        </strong>
        <span class="gray">
            @item.Description
        </span>

        <ul class="nav navbar-nav navbar-right">
            <li>
                <button type="submit" class="btn btn-link navbar-btn navbar-link" title="Rename" data-toggle="modal" data_target="#@i">
                    <span class="glyphicon glyphicon-pencil"></span>
                </button>
            </li>
            <li>
                <button type="submit" class="btn btn-link navbar-btn navbar-link" title="Icon">
                    <span class="glyphicon glyphicon-picture"></span>
                </button>
            </li>
            <li>
                <button type="submit" class="btn btn-link navbar-btn navbar-link" title="Color">
                    <span class="glyphicon glyphicon-tint"></span>
                </button>
            </li>
            <li>
                <button type="submit" class="btn btn-link navbar-btn navbar-link" title="Delete" @onclick(() => OnDeleteClick(item))>
                    <span class="glyphicon glyphicon-remove"></span>
                </button>
            </li>
        </ul>
    </div>

    <CategoryName Id="@j.ToString()" CategoryKey="@item.Key" Name="@item.Name" Description="@item.Description" />
}

@functions {

private static CategoryEventHandler handler;

public List<CategoryModel> Models { get; private set; } = new List<CategoryModel>();

protected override async Task OnInitAsync()
{
    if (handler == null)
    {
        handler = new CategoryEventHandler(OnEvent);
        EventHandlers.AddAll(handler);
    }
    else
    {
        handler.Handler = OnEvent;
    }

    await LoadDataAsync();

    Console.WriteLine($"Categories: Count: {Models.Count}.");
}

protected string GetColorHashCode(CategoryModel model)
{
    byte[] data = new byte[] { model.Color.R, model.Color.G, model.Color.B, model.Color.A };
    return "#" + BitConverter.ToString(data).Replace("-", string.Empty);
}

protected async void OnEvent()
{
    await LoadDataAsync();
    StateHasChanged();
}

protected async Task LoadDataAsync() => Models = await Queries.QueryAsync(new ListAllCategory());

protected async void OnNewClick()
{
}

protected async void OnDeleteClick(CategoryModel model)
{
    await Commands.HandleAsync(new DeleteCategory(model.Key));
}

}
