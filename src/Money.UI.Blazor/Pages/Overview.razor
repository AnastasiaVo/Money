@typeparam T

<Money.Components.Title Icon="calendar" Main="@Title" Sub="@SubTitle" ButtonText="New Outcome" ButtonClick="@(() => { CreateModal.Show(); StateHasChanged(); })" />
<ExceptionPanel />

<OutcomeCreate @ref="CreateModal" CategoryKey="@CategoryKey" />
<Confirm @ref="DeleteConfirm" Message="@DeleteMessage" OnConfirmed="@OnDeleteConfirmed" />

<div class="overview">
    <Loading Context="@Loading" IsOverlay="true">
        @if (Items != null)
        {
            if (Items.Count > 0)
            {
                <SortButton TType="@OutcomeOverviewSortType" @bind-Current="@SortDescriptor" Changed="@OnSortChanged" />
                <div class="clear"></div>

                <div class="cards">
                    <CascadingValue Value="@this">
                        @foreach (var item in Items)
                        {
                            <OutcomeCard Model="@item" />
                        }
                    </CascadingValue>
                </div>

                <Paging LoadPageAsync="@LoadDataAsync" />
            }
            else
            {
                <Alert Title="No data." Message="Try adding some outcomes." Mode="@AlertMode.Warning" />
            }
        }
    </Loading>
</div>

<OutcomeAmount @ref="AmountEditModal" OutcomeKey="@SelectedItem?.Key" Amount="@(SelectedItem?.Amount?.Value ?? 0)" Currency="@SelectedItem?.Amount?.Currency" />
<OutcomeDescription @ref="DescriptionEditModal" OutcomeKey="@SelectedItem?.Key" Description="@SelectedItem?.Description" />
<OutcomeWhen @ref="WhenEditModal" OutcomeKey="@SelectedItem?.Key" When="@(SelectedItem?.When ?? DateTime.MinValue)" />
