@page "/outcomes/{Year}/{Month}"
@page "/overview/{Year}/{Month}"
@page "/overview/{Year}/{Month}/{CategoryGuid}"

@page "/{Year}/{Month}/overview"
@page "/{Year}/{Month}/overview/{CategoryGuid}"
@inherits OverviewBase

<Title Icon="calendar" Main="@Title" Sub="List of each single outcome in selected month" ButtonText="New Outcome" ButtonClick="@(() => { IsCreateVisible = true; StateHasChanged(); })" />
<ExceptionPanel />

<OutcomeCreate bind-IsVisible="@IsCreateVisible" CategoryKey="@CategoryKey" />
<Confirm Context="@Delete" />

<div class="overview">
    <Loading Context="@Loading" IsOverlay="true">
        @if (Models != null)
        {
            if (Models.Count > 0)
            {
                <SortButton TType="@OverviewSortType" />
                <div class="clear"></div>

                <div class="cards">
                    @foreach (var item in Models)
                    {
                        <div class="card">
                            <div class="data">
                                <h2 class="amount">@FormatPrice(item.Amount)</h2>
                                <p class="when">@item.When.ToShortDateString()</p>
                                <p class="description">@item.Description</p>
                            </div>
                            <div class="controls">
                                <IconButton Icon="usd" ToolTip="Change Amount" Click="@(() => OnActionClick(item, ref IsAmountEditVisible))" />
                                <IconButton Icon="comment" ToolTip="Change Description" Click="@(() => OnActionClick(item, ref IsDescriptionEditVisible))" />
                                <IconButton Icon="calendar" ToolTip="Change When" Click="@(() => OnActionClick(item, ref IsWhenEditVisible))" />
                                <IconButton Icon="remove" ToolTip="Delete" Click="@(() => OnDeleteClick(item))" />
                            </div>
                            <div class="clear"></div>
                        </div>
                    }
                </div>

                <Paging LoadPageAsync="@LoadDataAsync" />
            }
            else
            {
                < Alert Title = "No data." Message = "Try adding some outcomes." Mode = "@AlertMode.Warning" />
            }
        }
    </Loading>
</div>

@if (Selected != null)
{
    <OutcomeAmount OutcomeKey="@Selected.Key" Amount="@Selected.Amount.Value" Currency="@Selected.Amount.Currency" bind-IsVisible="@IsAmountEditVisible" />
    <OutcomeDescription OutcomeKey="@Selected.Key" Description="@Selected.Description" bind-IsVisible="@IsDescriptionEditVisible" />
    <OutcomeWhen OutcomeKey="@Selected.Key" When="@Selected.When" bind-IsVisible="@IsWhenEditVisible" />
}