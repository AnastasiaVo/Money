@inject Neptuo.Exceptions.Handlers.ExceptionHandlerBuilder ExceptionHandlerBuilder
@inject Money.Services.MessageBuilder MessageBuilder

@if (LastException != null)
{
    <Alert bind-Title="@Title" bind-Message="@Message" Mode="@AlertMode.Error" IsDismissible="true" />
}

@functions {

    public Exception LastException { get; private set; }

    public string Title { get; private set; }
    public string Message { get; private set; }

    protected override void OnInit()
    {
        ExceptionHandlerBuilder.Handler(e =>
        {
            LastException = e;

            if (e is Neptuo.Models.AggregateRootException)
            {
                string message = null;

                if (e is CurrencyAlreadyAsDefaultException)
                    message = MessageBuilder.CurrencyAlreadyAsDefault();
                else if (e is CurrencyAlreadyExistsException)
                    message = MessageBuilder.CurrencyAlreadyExists();
                else if (e is CurrencyDoesNotExistException)
                    message = MessageBuilder.CurrencyDoesNotExist();
                else if (e is CurrencyExchangeRateDoesNotExistException)
                    message = MessageBuilder.CurrencyExchangeRateDoesNotExist();
                else if (e is OutcomeAlreadyDeletedException)
                    message = MessageBuilder.OutcomeAlreadyDeleted();
                else if (e is OutcomeAlreadyHasCategoryException)
                    message = MessageBuilder.OutcomeAlreadyHasCategory();
                else if (e is CantDeleteDefaultCurrencyException)
                    message = MessageBuilder.CantDeleteDefaultCurrency();
                else if (e is CantDeleteLastCurrencyException)
                    message = MessageBuilder.CantDeleteLastCurrency();

                Message = message;
            }

            if (Message == null)
            {
                Title = LastException.GetType().FullName;
                Message = LastException.Message;
            }
            else
            {
                Title = null;
            }

            StateHasChanged();
        });

        base.OnInit();
    }

}
