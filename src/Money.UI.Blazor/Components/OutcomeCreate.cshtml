@using Neptuo.Models.Keys
@inject ICommandDispatcher Commands
@inject IQueryDispatcher Queries

<Modal Title="@Title" PrimaryButtonText="@SaveButtonText" PrimaryButtonClick="@OnSaveClick" IsVisible="@IsVisible" Closed="@OnModalClosed">
    @if (!String.IsNullOrEmpty(ErrorMessage))
    {
        <Alert Title="Validation." Message="@ErrorMessage" Mode="@AlertMode.Error" />
    }
    <div class="row">
        <div class="col-md-9">
            <div class="form-group">
                <label for="outcome-amount">Amount:</label>
                <input type="text" class="form-control" id="outcome-amount" @bind(AmountString) data-autofocus />
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label for="outcome-currency">Currency:</label>
                <select class="form-control" id="outcome-currency" @bind(Currency)>
                    @if (Currencies != null)
                    {
                        @foreach (var currency in Currencies)
                        {
                            <option value="@currency.UniqueCode">
                                @currency.Symbol
                            </option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="form-group">
        <label for="outcome-description">Description:</label>
        <input type="text" class="form-control" id="outcome-description" @bind(Description) />
    </div>
    <div class="form-group">
        <label for="outcome-when">When:</label>
        <input type="text" class="form-control" id="outcome-when" @bind(When, "yyyy-MM-dd") />
    </div>
    <div class="form-group">
        <label>Category:</label>
        @if (Categories != null)
        {
            @foreach (var category in Categories)
            {
                <button class="btn btn-block" style="background-color: @category.Color.ToHashCode();" @onclick(() => CategoryKey = category.Key)>
                    <span>@category.Icon</span>
                    <strong>@category.Name</strong>
                    <span>@category.Description</span>
                </button>
            }
        }
    </div>
</Modal>

@functions {

    public bool IsVisible { get; set; }

    public Action Closed { get; set; }

    protected string Title { get; set; }
    protected string SaveButtonText { get; set; }
    protected string ErrorMessage { get; set; }

    protected List<CategoryModel> Categories { get; private set; }
    protected List<CurrencyModel> Currencies { get; private set; }

    public decimal Amount { get; set; }

    public string AmountString
    {
        get => Amount.ToString();
        set
        {
            if (Decimal.TryParse(value, out decimal target))
                Amount = target;
            else
                Amount = 0;
        }
    }

    public string Currency { get; set; }
    public string Description { get; set; }
    public DateTime When { get; set; } = DateTime.Today;
    public IKey CategoryKey { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        Title = "Create a new Outcome";
        SaveButtonText = "Create";

        Categories = await Queries.QueryAsync(new ListAllCategory());
        Currencies = await Queries.QueryAsync(new ListAllCurrency());
        Currency = Currencies.FirstOrDefault()?.UniqueCode;
    }

    protected bool OnSaveClick()
    {
        Console.WriteLine($"Outcome: Amount: {Amount}, Currency: {Currency}, Category: {CategoryKey}, When: {When}.");

        if (Amount > 0 && !String.IsNullOrEmpty(Currency) && CategoryKey != null && !CategoryKey.IsEmpty)
        {
            ErrorMessage = null;
            Execute();
            return true;
        }
        else
        {
            ErrorMessage = "Missing some required parameters!";
            return false;
        }
    }

    private async void Execute()
    {
        await Commands.HandleAsync(new CreateOutcome(new Price(Amount, Currency), Description, When, CategoryKey));

        Amount = 0;
        CategoryKey = null;
        Description = null;
        StateHasChanged();
    }

    protected void OnModalClosed()
    {
        IsVisible = false;
        Closed?.Invoke();
    }
}
