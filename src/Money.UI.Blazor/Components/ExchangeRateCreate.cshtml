@inherits DialogBase
@inject ICommandDispatcher Commands
@inject IQueryDispatcher Queries

<Modal Title="Set Exchange Rate" Size="@ModalSize.Small" PrimaryButtonText="Save" PrimaryButtonClick="@OnSaveClick" bind-IsVisible="@IsVisible">
    @if (!String.IsNullOrEmpty(ErrorMessage))
    {
        <Alert Title="Validation." Message="@ErrorMessage" Mode="@AlertMode.Error" />
    }
    <div class="form-group">
        <label for="exchangerate-source">Source Currency:</label>
        <select class="form-control" id="exchangerate-source" bind="@SourceCurrency" data-autofocus>
            @if (Currencies != null)
            {
                @foreach (var currency in Currencies)
                {
                    if (currency.UniqueCode != TargetCurrency)
                    {
                        <option value="@currency.UniqueCode">
                            @currency.Symbol
                        </option>
                    }
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label for="exchangerate-rate">Rate:</label>
        <input type="number" class="form-control" id="exchangerate-rate" bind="@RateString" />
    </div>
    <div class="form-group">
        <label for="exchangerate-target">Target Currency:</label>
        <select class="form-control" id="exchangerate-target" disabled>
            @if (Currencies != null)
            {
                @foreach (var currency in Currencies)
                {
                    if (currency.UniqueCode == TargetCurrency)
                    {
                        <option value="@currency.UniqueCode">
                            @currency.Symbol
                        </option>
                    }
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label for="exchangevalidfrom-validfrom">Valid from:</label>
        <input type="date" class="form-control" id="exchangevalidfrom-validfrom" bind="@ValidFrom" format-value="yyy-MM-dd" />
    </div>
</Modal>

@functions
{
    protected string ErrorMessage { get; set; }

    protected List<CurrencyModel> Currencies { get; private set; }

    protected double Rate { get; set; }

    protected string RateString
    {
        get => Rate.ToString();
        set
        {
            if (Double.TryParse(value, out double target))
                Rate = target;
            else
                Rate = 0;
        }
    }

    protected string SourceCurrency { get; set; }
    public string TargetCurrency { get; set; }
    protected DateTime ValidFrom { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            Reset();
            Currencies = await Queries.QueryAsync(new ListAllCurrency());
        }
    }

    protected void Reset()
    {
        Rate = 1;
        ValidFrom = DateTime.Today;
    }

    protected bool OnSaveClick()
    {
        if (Rate > 0 && SourceCurrency != TargetCurrency && !String.IsNullOrEmpty(SourceCurrency))
        {
            Commands.HandleAsync(new SetExchangeRate(SourceCurrency, TargetCurrency, ValidFrom, Rate));
            Reset();
            return true;
        }
        else
        {
            ErrorMessage = "Missing some required parameters!";
            return false;
        }
    }
}