@inherits DialogBase
@inject IQueryDispatcher Queries

<Modal Title="@Title" bind-IsVisible="@IsVisible">
    @if (Models != null)
    {
        if (Models.Count > 0)
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>From</th>
                        <th>To</th>
                        <th>Valid from</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Models)
                    {
                        <tr>
                            <td>1 @item.SourceCurrency</td>
                            <td>@item.Rate @TargetCurrency</td>
                            <td>@item.ValidFrom.ToShortDateString()</td>
                            <td>
                                <div class="actions">
                                    <button type="submit" class="btn btn-link navbar-btn navbar-link" title="Delete" onclick="@(() => OnDeleteClick(item))">
                                        <span class="glyphicon glyphicon-remove"></span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <Alert Title="No data." Message="Try adding some exchange rates." Mode="@AlertMode.Warning" />
        }
    }
</Modal>

@functions
{
    public string TargetCurrency { get; set; }

    protected string Title { get; set; }
    protected List<ExchangeRateModel> Models { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            Title = $"List of Exchange Rates for {TargetCurrency}";
            Models = await Queries.QueryAsync(new ListTargetCurrencyExchangeRates(TargetCurrency));
        }
    }

    protected void OnDeleteClick(ExchangeRateModel model)
    {

    }
}