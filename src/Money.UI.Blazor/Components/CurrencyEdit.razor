@inherits DialogBase
@inject ICommandDispatcher Commands

<Modal Title="@Title" PrimaryButtonText="@SaveButtonText" PrimaryButtonClick="@OnSaveClick" @bind-IsVisible="@IsVisible">
    <Validation ErrorMessages="@ErrorMessages" />

    <div class="form-group">
        <label for="currency-unique-code">Unique Code:</label>
        <input type="text" class="form-control" id="currency-unique-code" placeholder="Currency Unique Code" data-autofocus="@IsUniqueCodeEnabled" disabled="@(!IsUniqueCodeEnabled)" @bind="@UniqueCode" />
    </div>
    <div class="form-group">
        <label for="currency-symbol">Symbol:</label>
        <input type="text" class="form-control" id="currency-symbol" placeholder="Currency Symbol" data-autofocus="@(!IsUniqueCodeEnabled)" @bind="@Symbol" />
    </div>
</Modal>

@code 
{
    private string originalUniqueCode;
    private string originalSymbol;
    protected List<string> ErrorMessages { get; } = new List<string>();

    [Inject]
    internal ILog<CurrencyEdit> Log { get; set; }

    [Parameter]
    public string UniqueCode { get; set; }

    [Parameter]
    public string Symbol { get; set; }

    protected string Title { get; set; }
    protected string SaveButtonText { get; set; }
    protected bool IsUniqueCodeEnabled { get; set; }

    private bool isNew;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        isNew = parameters.GetValueOrDefault<string>(nameof(UniqueCode)) == null;

        return base.SetParametersAsync(parameters);
    }

    protected override Task OnParametersSetAsync()
    {
        originalUniqueCode = UniqueCode;
        originalSymbol = Symbol;

        if (isNew)
        {
            Title = "Create a new Currency";
            SaveButtonText = "Create";
            IsUniqueCodeEnabled = true;
        }
        else
        {
            Title = "Change Currency";
            SaveButtonText = "Save";
            IsUniqueCodeEnabled = false;
        }

        return base.OnParametersSetAsync();
    }

    protected bool OnSaveClick()
    {
        if (isNew)
        {
            if (Validate())
            {
                ExecuteCreate();
                return true;
            }
        }
        else if (originalSymbol != Symbol)
        {
            ExecuteChange();
            originalSymbol = Symbol;
            return true;
        }

        return false;
    }

    private bool Validate()
    {
        ErrorMessages.Clear();
        Validator.AddCurrencyUniqueCode(ErrorMessages, UniqueCode);
        Validator.AddCurrencySymbol(ErrorMessages, Symbol);

        return ErrorMessages.Count == 0;
    }

    private async void ExecuteCreate()
    {
        await Commands.HandleAsync(new CreateCurrency(UniqueCode, Symbol));
        UniqueCode = Symbol = String.Empty;
        StateHasChanged();
    }

    private async void ExecuteChange()
    {
        await Commands.HandleAsync(new ChangeCurrencySymbol(UniqueCode, Symbol));
    }
}
