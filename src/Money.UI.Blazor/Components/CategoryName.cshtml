@using Neptuo.Models.Keys
@inherits DialogBase
@inject ICommandDispatcher Commands

<Modal Title="@Title" PrimaryButtonText="@SaveButtonText" PrimaryButtonClick="@OnSaveClick" bind-IsVisible="@IsVisible">
    <ValidationSummary ErrorMessages="@ErrorMessages" />
    <div class="form-group">
        <label for="category-name">Name:</label>
        <input type="text" class="form-control" id="category-name" placeholder="Category Name" data-autofocus bind="@Name" />
    </div>
    <div class="form-group">
        <label for="category-description">Description:</label>
        <input type="text" class="form-control" id="category-description" placeholder="Category Description" bind="@Description" />
    </div>
</Modal>

@functions 
{
    private string originalName;
    private string originalDescription;
    protected List<string> ErrorMessages { get; } = new List<string>();

    [Parameter]
    protected IKey CategoryKey { get; set; }

    [Parameter]
    protected string Name { get; set; }

    [Parameter]
    protected string Description { get; set; }

    protected string Title { get; set; }
    protected string SaveButtonText { get; set; }

    protected override void OnParametersSet()
    {
        if (CategoryKey == null || CategoryKey.IsEmpty)
        {
            Title = "Create a new Category";
            SaveButtonText = "Create";
        }
        else
        {
            Title = "Rename Category";
            SaveButtonText = "Save";
        }

        originalName = Name;
        originalDescription = Description;
    }

    protected bool OnSaveClick()
    {
        if (CategoryKey == null || CategoryKey.IsEmpty)
        {
            if (Validate())
            {
                ExecuteCreate();
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            if (Validate())
            {
                if (originalName != Name)
                    ExecuteRename();

                if (originalDescription != Description)
                    ExecuteChangeDescription();

                return true;
            }
            else
            {
                return false;
            }
        }
    }

    private bool Validate()
    {
        ErrorMessages.Clear();
        Validator.AddCategoryName(ErrorMessages, Name);
        Validator.AddCategoryDescription(ErrorMessages, Description);

        return ErrorMessages.Count == 0;
    }

    private async void ExecuteCreate()
    {
        await Commands.HandleAsync(new CreateCategory(Name, Description, NextRandomColor()));
        Name = Description = String.Empty;
        StateHasChanged(); ;
    }

    private async void ExecuteRename()
    {
        await Commands.HandleAsync(new RenameCategory(CategoryKey, Name));
        originalName = Name;
    }

    private async void ExecuteChangeDescription()
    {
        await Commands.HandleAsync(new ChangeCategoryDescription(CategoryKey, Description));
        originalDescription = Description;
    }

    private Random rnd = new Random();

    protected Color NextRandomColor()
        => Color.FromArgb((byte)rnd.Next(255), (byte)rnd.Next(255), (byte)rnd.Next(255), (byte)rnd.Next(255));
}
