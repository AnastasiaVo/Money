@using Neptuo.Models.Keys
@inherits DialogBase
@inject ICommandDispatcher Commands
@inject IQueryDispatcher Queries

<Modal Title="Change an amount of the outcome" PrimaryButtonText="Save" PrimaryButtonClick="@OnSaveClick" bind-IsVisible="@IsVisible">
    <Validation ErrorMessages="@ErrorMessages" />
    <div class="row">
        <div class="col-md-9">
            <div class="form-group">
                <label for="outcome-amount">Amount:</label>
                <input type="text" class="form-control" id="outcome-amount" data-autofocus bind="@Amount" />
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label for="outcome-currency">Currency:</label>
                <select class="form-control" id="outcome-currency" bind="@Currency">
                    @if (Currencies != null)
                    {
                        @foreach (var currency in Currencies)
                        {
                            <option value="@currency.UniqueCode">
                                @currency.Symbol
                            </option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>
</Modal>

@functions {

    private decimal originalAmount;
    private string originalCurrency;

    public List<CurrencyModel> Currencies { get; private set; }
    protected List<string> ErrorMessages { get; } = new List<string>();

    [Parameter]
    protected IKey OutcomeKey { get; set; }

    [Parameter]
    protected decimal Amount { get; set; }

    [Parameter]
    protected string Currency { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        SetOriginal();
        Currencies = await Queries.QueryAsync(new ListAllCurrency());
    }

    private void SetOriginal()
    {
        originalAmount = Amount;
        originalCurrency = Currency;
    }

    protected bool OnSaveClick()
    {
        if (Validate() && (originalAmount != Amount || originalCurrency != Currency))
        {
            Execute();
            SetOriginal();
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool Validate()
    {
        ErrorMessages.Clear();
        Validator.AddOutcomeAmount(ErrorMessages, Amount);
        Validator.AddOutcomeCurrency(ErrorMessages, Currency);

        return ErrorMessages.Count == 0;
    }

    private async void Execute()
    {
        await Commands.HandleAsync(new ChangeOutcomeAmount(OutcomeKey, new Price(Amount, Currency)));
    }
}
