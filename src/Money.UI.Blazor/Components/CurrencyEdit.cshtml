@inherits DialogBase
@inject ICommandDispatcher Commands

<Modal Title="@Title" PrimaryButtonText="@SaveButtonText" PrimaryButtonClick="@OnSaveClick" bind-IsVisible="@IsVisible">
    <div class="form-group">
        <label for="currency-unique-code">Unique Code:</label>
        @if (IsUniqueCodeEnabled)
        {
            <input type="text" class="form-control" id="currency-unique-code" placeholder="Currency Symbol" bind="@UniqueCode" />
        }
        else
        {
            <input type="text" class="form-control" id="currency-unique-code" placeholder="Currency Symbol" bind="@UniqueCode" disabled="disabled" />
        }
    </div>
    <div class="form-group">
        <label for="currency-symbol">Symbol:</label>
        <input type="text" class="form-control" id="currency-symbol" placeholder="Currency Symbol" bind="@Symbol" />
    </div>
</Modal>

@functions {

    private string originalUniqueCode;
    private string originalSymbol;

    [Parameter]
    protected string UniqueCode { get; set; }

    [Parameter]
    protected string Symbol { get; set; }

    protected string Title { get; set; }
    protected string SaveButtonText { get; set; }
    protected bool IsUniqueCodeEnabled { get; set; }

    protected override void OnParametersSet()
    {
        originalUniqueCode = UniqueCode;
        originalSymbol = Symbol;

        if (originalSymbol == null)
        {
            Title = "Create a new Currency";
            SaveButtonText = "Create";
            IsUniqueCodeEnabled = true;
        }
        else
        {
            Title = "Change Currency";
            SaveButtonText = "Save";
            IsUniqueCodeEnabled = false;
        }
    }

    protected bool OnSaveClick()
    {
        if (originalUniqueCode == null && !String.IsNullOrEmpty(UniqueCode))
        {
            ExecuteCreate();
            return true;
        }
        else if (originalSymbol != Symbol)
        {
            ExecuteChange();
            originalSymbol = Symbol;
            return true;
        }
        else
        {
            return false;
        }
    }

    private async void ExecuteCreate()
    {
        await Commands.HandleAsync(new CreateCurrency(UniqueCode, Symbol));
        UniqueCode = Symbol = String.Empty;
        StateHasChanged();
    }

    private async void ExecuteChange()
    {
        await Commands.HandleAsync(new ChangeCurrencySymbol(UniqueCode, Symbol));
    }
}
